<aura:documentation>
	<aura:description>
      
    <div class="slds-m-top_large">
    <h4>Overview</h4>
    <p>The <code>&lt;c:PEG_AnalyticsMassAction_CMP&gt;</code> component enables to leverage
        an Einstein Analytics Dashboard to select record IDs and execute a mass creation of
        target records in the Salesforce core platform.</p>

        <p>It provides an alternative to the Tableau CRM mass actions requiring a VF page to implement
        the logic, providing 2 main benefits:</p>
        <ul>
            <li>remain within the current browser tab / console application (e.g. stay in the current
            campaign record page)</li>
            <li>easily contextualise the action to the current record/user (e.g. add members to the campaign
            record being currently displayed)</li>
        </ul>
        <p>Such an approach enables to replace possibly complex/slow query/filter Lightning components
        by scalable Tableau CRM dashboards to trigger mass operations on Salesforce core data.
        Real-life examples include:</p>
        <ul>
            <li>Contact / Lead targeting for campaigns</li>
            <li>Account owner change / portfolio reassignment</li>
        </ul>

    <p>It basically provides a single mass Action button on top of a Tableau CRM Dashboard,
        button which becomes active once the component has been completely initialized
        (all Dashboard metadata fetched and processed).
        When clicking on this action, the component executes the following operations:</p>
    <ul>
        <li>target record IDs fetch via SAQL based on the current dashboard filtering state</li>
        <li>target ID list filtering via a SOQL query to remove any already proccessed ones</li>
        <li>user operation confirmation (with possible entry of additional data to be replicated
            on all records to be created)</li>
        <li>mass insert of records in Salesforce core database</li>
    </ul>

    <p>It proposes the following configuration elements:</p>
    <ul>
        <li><code>Title</code> and <code>Icon</code> of the component card container
            (custom labels being usable for the title with the <code>$Label.c.LabelName</code>
            syntax)</li>
        <li><code>Display height</code> of the EA Dashboard (in pixels)</li>
        <li><code>Dashboard Name</code> containing the API Name of the Tableau CRM Dashboard to be used</li>
        <li><code>Dashboard Filter</code> containing the filter to apply automatically on the  Dashboard
            upon initialization to contextualize it to the record/user context (leveraging contextual
            merge information). </li>
        <li><code>Dataset Name</code> identifying the dataset to be used for the SAQL
                targeting query (within the possible N connected ones used by the Dashboard) </li>
        <li><code>ID Field Name</code> identifying the field in this dataset to be used as target IDs</li>
        <li><code>Other fields</code> (optional) providing a list of other fields to fetch via SAQL
            from the dataset to be used the insert action afterwards as a stringified JSON list, like
            [{"name":"TcrmFieldName1","target":"CoreFieldApiName1"},...] (non compatible with the Group By parameter below).</li>
        <li><code>Use Group by?</code> (optional) to implement a group by SAQL query if multiple
                entries may have the same target ID in the dataset (and reduce the impact of the max.
                25 000 rows constraint)</li>
        <li><code>Action Label</code> of the main action button (located within the card
                    container header, also supporting custom labels)</li>
        <li><code>Action Message</code> displayed in the action popup to provide (optional) information
                to the user about the action being executed.</li>
        <li><code>SOQL Control Query</code> providing the SOQL query template to be used to
                filter out already existing records (returning target record IDs with an 
                <code>in {{{ROWS}}}</code> where clause evaluated upon action) </li>
        <li><code>Target Record Template</code> containing a JSON object record template which will be
                replicated for each target record to be inserted (with at least the <code>sobjectType</code>
                property set)</li>
        <li><code>Target Lookup Field</code> indicating the API Name of the ID field to be retrieved
                in the SOQL control query and applied on the target records.</li>
        <li><code>Action Input Fields</code> providing an optional set of field API names to display
                a form in the action confirmation popup, the values of which being replicated on all target
                records.</li>
        <li><code>Batch Size</code> settingh a max. number of rows per <code>insert</code> operation,
                the component iterating until all target records have been inserted.</li>
        <li><code>Refresh Tab</code> to force a refresh of the current tab after addition
                of new campaign members (so that the standard "campaign member" component
                gets automatically updated.</li>
    </ul>

    <p>This component relies on the following components:</p>
    <ul>
        <li><a href="/docs/component-library/bundle/wave:sdk/documentation"><code>&lt;wave:waveDashboard&gt;</code></a>
            to embed the EA dashboard and fetch its detailed status when adding new campaign members</li>
        <li><a href="/docs/component-library/bundle/wave:waveDashboard/documentation"><code>&lt;wave:sdk&gt;</code></a>
            to fetch various EA configuration data (dashboard and dataset descriptions)</li>
        <li><a href="/docs/component-library/bundle/c:PEG_SOQL_CMP/documentation"><code>&lt;PEG_SOQL_CMP&gt;</code></a>
            to execute SOQL queries (to filter out record IDs already members of the current campaign) and
            insert DMLs (to add new members).</li>
        <li><a href="/docs/component-library/bundle/c:PEG_Merge_CMP/documentation"><code>&lt;PEG_Merge_CMP&gt;</code></a>
                to contextualise information based on current User, page Record...</li>
    </ul>

    <p><b>Important</b></p>
    <ul>
        <li>The SAQL query to fetch the member IDs from the dashboard is rebuilt by
            the component based on the EA Dashboard situation when clicking the action button.
            Dashboard and Dataset metadata are parsed at component initialisation but any
            advanced JSON configuration (SAQL and SOQL steps, custom bindings...) is not
            supported. --> Only dataset connections, global filters and widget steps
            configured directly from the Analytics Studio are currently supported.</li>
        <li>DMLs and SAQL queries are limited to 25 000 records. --> The components therefore
            does not support adding more than such a number.</li>
        <li>Various information/error messages or action labels displayed by the component
            are managed via <code>PEG_AnalyticsMassAction...</code> custom labels. 
            A special case in the <code>PEG_AnalyticsMassActionMessage</code> label
            displayed on top of the confirmation popup and including 2
            merge data tokens respectively for the original number of records fetched
            via SAQL and the number of new records to add (after having removed the ones
            already present determined via SOQL)</li>
    </ul>
    <br/>
    </div>

    <div class="slds-m-top_large">
        <h4>Legal Notice</h4>
        <p>Author: P-E GROS / Sept. 2020</p>
        <br/>
        <p>MIT License</p>
        <br/>
        <p>Copyright (c) 2020 pegros</p>
        <br/>
        <p> Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:</p>
        <br/>
        <p> The above copyright notice and this permission notice shall be included in all
            copies or substantial portions of the Software.</p>
        <br/>
        <p> THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
            SOFTWARE.</p>
    </div>
    </aura:description>
</aura:documentation>