<aura:documentation>
    <aura:description>
	<div class="slds-m-top_large">
    <h4>Overview</h4>
    <p>The <code>&lt;c:PEG_SOQL_CMP&gt;</code> component is a pure utility Lightning component.
        It provides two methods to Lightning components to execute operations on the Salesforce
        database, respectively <code>runQuery</code> for SOQL queries and <code>runDML</code> 
        for other DML statements (create, update, upsert, delete...).</p>
    <p>It enables to execute operations not possible via the Lightning Data Service (for now at
        least), such as non supported Objects or mass operations.</p>
    <p>In order to call these methods, the requesting Lightning component just has to instanciate
        the <code>&lt;c:PEG_SOQL_CMP&gt;</code> within its body and give it a unique
        <code>aura:id</code> to be able to find it easily to call its methods.</p>
<pre>&lt;c:PEG_SOQL_CMP  aura:id="soqlUtil"/&gt;</pre>
    <br/>
    </div>
    
    <div class="slds-m-top_large">
    <h4>Executing SOQL queries</h4>
    <p>In order to trigger a SOQL query, just call the <code>runQuery</code> method on the 
        <code>&lt;c:PEG_SOQL_CMP&gt;</code> component, providing the SOQL query to execute,
        the three boolean flags (controlling respectively the security enforcement, the caching
        use and the background mode), and a callback method to process the results (with two
        JSON object parameters containing respectively the result of the query or its error).</p>
<pre>component.find('soqlUtil').runQuery(
     'select count(Id) from Account WITH SECURITY_ENFORCED',
     false, false, "", false, false,
     function(queryResult,queryError) {
          if (queryResult) {
              // process OK (in queryResult object)
              ...
          } else {
              // process KO (in queryError object)
              ...
          }});</pre>
        
     <p>By default, Sharing and FLS are applied and the <code>WITH SECURITY_ENFORCED</code>
         should therefore be systematically used in the SOQL query.</p>
     <ul>
     <li>There are however two boolean parameters available to bypass these controls, i.e.
         <code>bypassFLS</code> and <code>bypassSharing</code>.</li>
     <li>The setting of these flags to <code>true</code> requires a <code>queryType</code>
         parameter to be also provided.</li>
     <li>Its value should match the <code>DeveloperName</code> of a configured value of the
         <code>PEG_Query_mdt</code> custom metadata.</li>
     <li>This metadata record contains a regular expression used to check the validity
         of the SOQL query provided (simple regexp match) and two boolean flags to 
         authorize the bypass FLS and/or Sharing.</li>
     </ul>
        
     <p>Besides, two other technical parameters are also available to control the way SOQL
         queries are sent to the Salesforce server.</p>
    <ul>
    <li>The <code>isStorable</code> attribute enables to leverage the standard Lightning
        cache and fetch data locally if the same query is sent twice in a relatively 
        limited timeframe. When using the "refresh" button, this setting is bypassed
        and the query is actually sent to the Salesforce server.</li>
    <li>The <code>isBackground</code> attribute enables to send the query independentely
        from all callouts generated by the current page. This is especially important when
        the underlying query is long, in order not to block the rendering of the overall 
        page whil waiting for the results of this query.</li>
    </ul>
    <br/>
    </div>
        
    <div class="slds-m-top_large">
    <h4>Executing DML operations</h4>
    <p>In order to trigger a DML operation, just call the <code>runDML</code> method on the 
        <code>&lt;c:PEG_SOQL_CMP&gt;</code> component, providing the type of DML operation to
        execute ("insert", "update", "upsert", "delete", "undelete"), the list of JSON objects
        on which the DML should be executed and a callback method to process the results
        (with two JSON object parameters containing respectively the result of the DML or its error).</p>
<pre>component.find('soqlUtil').runDML(
     'update',
     [{"Id":"xxxx1","Name":"test1"},{"Id":"xxxx2","Name":"test2"}],
     function(dmlResult,dmlError) {
          if (dmlResult) {
              // process OK (in dmlResult object)
              ...
          } else {
              // process KO (in dmlError object)
              ...
          }});</pre>
    <br/>
    </div>
        
    <div class="slds-m-top_large">
        <h4>Legal Notice</h4>
        <p>Author: P-E GROS / Sept. 2020</p>
        <br/>
        <p>MIT License</p>
        <br/>
        <p>Copyright (c) 2020 pegros</p>
        <br/>
        <p> Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:</p>
        <br/>
        <p> The above copyright notice and this permission notice shall be included in all
            copies or substantial portions of the Software.</p>
        <br/>
        <p> THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
            SOFTWARE.</p>
    </div>
    </aura:description>
</aura:documentation>